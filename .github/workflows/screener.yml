name: Stock Screener

on:
  schedule:
    # 5분마다 실행 (빠른 테스트용)
    - cron: '*/5 * * * *'
  workflow_dispatch: # 수동 실행 허용
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 1단계: 파이썬 스크립트로 데이터를 빌드합니다.
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run stock screener
        run: python run_screener.py

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # public 폴더의 모든 내용을 업로드합니다.
          # (index.html, style.css, script.js, 그리고 생성된 data/screener_results.json)
          path: ./public

  # 2단계: 빌드된 결과물을 GitHub Pages에 배포합니다.
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
